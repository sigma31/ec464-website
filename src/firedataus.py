# -*- coding: utf-8 -*-
"""FireDataUS.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/19Zy8YbZUIbGB8mq_gh5PrZCnpHY4gkwU
"""

#https://www.fs.usda.gov/rds/archive/catalog/RDS-2013-0009.6 - DataSet Source
#https://www.kaggle.com/code/emilykchang/stats-project-wildfire-risk/notebook
import sqlite3
import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
import random
import re
from sklearn.neighbors import KNeighborsClassifier
from sklearn import tree, preprocessing
import sklearn.ensemble as ske
from sklearn.model_selection import train_test_split

from plotly.offline import init_notebook_mode, iplot, plot
import plotly as py
init_notebook_mode(connected=True)
import plotly.graph_objs as go

from google.colab import drive, files
drive.mount('/content/drive')

cnx = sqlite3.connect('./drive/MyDrive/Assignments/FPA_FOD_20221014.sqlite')

DF = pd.read_sql_query("SELECT FIRE_YEAR,NWCG_CAUSE_CLASSIFICATION,NWCG_GENERAL_CAUSE,LATITUDE,LONGITUDE,STATE,DISCOVERY_DATE, DISCOVERY_DOY, CONT_DATE, CONT_DOY, FIRE_SIZE_CLASS, FIRE_SIZE FROM 'Fires'", cnx)
print(DF.head())
print(DF.describe())

DF['NWCG_GENERAL_CAUSE'].value_counts()/len(DF)

DAY_TO_CONT=[]
DF=DF.dropna(subset=['CONT_DOY', 'FIRE_SIZE'])
for i in DF.index:
    day2cont=DF.loc[i,'CONT_DOY']-DF.loc[i,'DISCOVERY_DOY']
    DAY_TO_CONT.append(round(day2cont))

DF['DAY_TO_CONT']=DAY_TO_CONT

print(f'data shape\n (observations, features): {DF.shape}\n')
print(DF.head())

DF_cols=list(DF.columns)
print(DF_cols)
continuous_features = ['LATITUDE', 'LONGITUDE','DISCOVERY_DATE','DISCOVERY_DOY','CONT_DATE','CONT_DOY','FIRE_SIZE','DATE','DAY_TO_CONT']

DF_cols= [x for x in DF_cols if (x not in continuous_features)]

print(f'count plots for {DF_cols}\n')
for feature in DF_cols:
    print(feature)
    kwargs = dict(alpha=0.5)
    DF[feature].value_counts().plot(kind='barh',**kwargs, color='blue')
    plt.show()
    print("------------")

DF_cols=list(DF.columns)

DF_col= [x for x in DF_cols if (x in continuous_features and x not in  ['DISCOVERY_DATE','CONT_DATE'])]

print(f'count plots for {DF_col}\n')
for feature in DF_col:
    print(feature)
    kwargs = dict(bins=100,alpha=0.5)
    DF[feature].plot(kind='hist', **kwargs, color="blue")
    plt.xlabel(feature)
    plt.show()
    print("------------")

from plotly.offline import iplot
import plotly.graph_objs as go
from plotly.subplots import make_subplots
def enable_plotly_in_cell():
  import IPython
  from plotly.offline import init_notebook_mode
  display(IPython.core.display.HTML('''<script src="/static/components/requirejs/require.js"></script>'''))
  init_notebook_mode(connected=True)

DF_A = DF.DISCOVERY_DOY[DF.FIRE_SIZE_CLASS == 'A']
DF_B = DF.DISCOVERY_DOY[DF.FIRE_SIZE_CLASS == 'B']
DF_C = DF.DISCOVERY_DOY[DF.FIRE_SIZE_CLASS == 'C']
DF_D = DF.DISCOVERY_DOY[DF.FIRE_SIZE_CLASS == 'D']
DF_E = DF.DISCOVERY_DOY[DF.FIRE_SIZE_CLASS == 'E']
DF_F = DF.DISCOVERY_DOY[DF.FIRE_SIZE_CLASS == 'F']
DF_G = DF.DISCOVERY_DOY[DF.FIRE_SIZE_CLASS == 'G']

enable_plotly_in_cell()

trace1 = go.Histogram(
    x=DF_A,
    opacity=0.75,
    name = "A",
    marker=dict(color='rgba(171, 50, 96, 0.6)'))

trace2 = go.Histogram(
    x=DF_B,
    opacity=0.75,
    name = "B",
    marker=dict(color='rgba(12, 50, 196, 0.6)'))

trace3 = go.Histogram(
    x=DF_C,
    opacity=0.75,
    name = "C",
    marker=dict(color='rgb(12, 128, 128)'))

trace4 = go.Histogram(
    x=DF_D,
    opacity=0.75,
    name = "D",
    marker=dict(color='rgb(127, 127, 127)'))

trace5 = go.Histogram(
    x=DF_E,
    opacity=0.75,
    name = "E",
    marker=dict(color='rgb(140, 86, 75)'))

trace6 = go.Histogram(
    x=DF_F,
    opacity=0.75,
    name = "F",
    marker=dict(color='rgb(255, 127, 14)'))

trace7 = go.Histogram(
    x=DF_G,
    opacity=0.75,
    name = "G",
    marker=dict(color='rgb(214, 39, 40) '))

data = [trace1,trace2, trace3, trace4, trace5, trace6, trace7]

layout = go.Layout(barmode='overlay',
                   title=' yearly count of Fire Class A B C D E F G',
                   xaxis=dict(title='day of the year'),
                   yaxis=dict( title='Count'),
)

fig = go.Figure(data=data, layout=layout)
iplot(fig)

# Step 1: Import necessary libraries
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.ensemble import GradientBoostingClassifier
import xgboost as xgb
from sklearn.metrics import accuracy_score, confusion_matrix
from sklearn.preprocessing import LabelEncoder
from sklearn.utils.class_weight import compute_class_weight

# Step 2: Load your dataset into a pandas DataFrame
# Assuming your DataFrame is named 'df'
df = pd.read_sql_query("SELECT FIRE_YEAR,NWCG_CAUSE_CLASSIFICATION,NWCG_GENERAL_CAUSE,LATITUDE,LONGITUDE,STATE,DISCOVERY_DATE, DISCOVERY_DOY, CONT_DATE, CONT_DOY, FIRE_SIZE_CLASS, FIRE_SIZE FROM 'Fires'", cnx)
string_columns = df.select_dtypes(include='object').columns

# Step 3: Preprocess the data
# Drop 'DISCOVERY_DATE' and 'CONT_DATE' columns
df = df.drop(['DISCOVERY_DATE', 'CONT_DATE'], axis=1)
df = df.dropna(subset=['CONT_DOY', 'FIRE_SIZE'])
string_columns = df.select_dtypes(include='object').columns

# Label Encoding for string columns
label_encoder = LabelEncoder()
for col in string_columns:
    df[col] = label_encoder.fit_transform(df[col])

# Step 4: Split the data into training and testing sets
X = df.drop(['FIRE_SIZE_CLASS', 'FIRE_SIZE'], axis=1)
y_fire_class = df[['FIRE_SIZE_CLASS']]
X_train, X_test, y_train_fire_class, y_test_fire_class = train_test_split(X, y_fire_class, test_size=0.2, random_state=42)

# Step 5: Define machine learning model
class_weights = compute_class_weight('balanced', classes=np.unique(y_train_fire_class), y=y_train_fire_class.values.ravel())
model_fire_class = xgb.XGBClassifier(scale_pos_weight=class_weights[1])

# Step 6: Train the model
model_fire_class.fit(X_train, y_train_fire_class.values.ravel())

y_pred_fire_class = model_fire_class.predict(X_test)

accuracy_fire_class = accuracy_score(y_test_fire_class, y_pred_fire_class)

print("Accuracy for fire class prediction:", accuracy_fire_class)

from sklearn.metrics import confusion_matrix
import seaborn as sns
conf_mat = confusion_matrix(y_test_fire_class, y_pred_fire_class)
plt.figure(figsize=(8, 6))
sns.heatmap(conf_mat, annot=True, fmt="d", cmap="Blues", xticklabels=label_encoder.classes_, yticklabels=label_encoder.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix for Fire Class Prediction')
plt.show()

from sklearn.metrics import classification_report

print(classification_report(y_test_fire_class, y_pred_fire_class))